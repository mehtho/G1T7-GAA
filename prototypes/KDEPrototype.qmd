```{r}
pacman::p_load(tidyverse, sf, tmap, maptools, spatstat, raster, tidyr, readxl)
```

```{r}
pop2020 <- read_excel("../data/aspatial/Singapore Census of Population (2020).xlsx", sheet=2, skip=4, col_names=TRUE)
```

Remove rows that are all NA:

```{r}
pop2020 <- pop2020[rowSums(is.na(pop2020)) != ncol(pop2020),]
```

Rename col, remove all rows where any other column except first column is NA. Remove rows where the first column is "Planning Area of Residence" - indicates start of new page, useless.

```{r}
colnames(pop2020)[1] = "Planning_Area"
cols_to_check <- names(pop2020)[-1]
pop2020 <- pop2020[complete.cases(pop2020[, cols_to_check]), ]
pop2020 <- pop2020[!(pop2020$Planning_Area %in% "Planning Area of Residence"),]
```

Use function to replace all missing values (NA) with the last non-missing value, will help to fill up subzones with its proper planning area.

```{r}
fill_missing <- function(x) {
  non_na_index <- which(!is.na(x))
  last_non_na <- NA
  for (i in 1:length(x)) {
    if (is.na(x[i])) {
      if (!is.na(last_non_na)) {
        x[i] <- x[last_non_na]
      }
    } else {
      last_non_na <- i
    }
  }
  return(x)
}

pop2020$Planning_Area <- fill_missing(pop2020$Planning_Area)
```

Replace - with 0.

```{r}
data_columns <- names(pop2020)[-1]
pop2020[, data_columns] <- lapply(pop2020[, data_columns], function(x) gsub("-", "0", x))
```

```{r}
pop2020$Planning_Area <- gsub("\r\n", "", pop2020$Planning_Area)
pop2020$Subzone <- gsub("\r\n", "", pop2020$Subzone)
pop2020$Subzone <- gsub("0", "-", pop2020$Subzone)
pop2020$Subzone <- toupper(pop2020$Subzone)

pop2020$Subzone <- gsub("KANGNORTH", "KANG NORTH", pop2020$Subzone)

pop2020$Planning_Area <- toupper(pop2020$Planning_Area)
pop2020filtered <- pop2020[pop2020$Subzone != "TOTAL",]

merged <- merge(mpsz, pop2020filtered, by.x="SUBZONE_N", by.y="Subzone")
write_rds(pop2020filtered, '../data/rds/pop2020.rds')
```

```{r}
supermarkets <- read_rds("../data/rds/supermarkets.rds")
```

```{r}
supermarkets_sp <- as_Spatial(supermarkets)
```

```{r}
supermarkets_sp <- as(supermarkets_sp, "SpatialPoints")
```

```{r}
supermarkets_ppp <- as(supermarkets_sp, "ppp")
supermarkets_ppp
```

```{r}
plot(supermarkets_ppp)
```

```{r}
any(duplicated(supermarkets_ppp))
```

```{r}
supermarkets_ppp_jit <- rjitter(supermarkets_ppp,
                                retry=TRUE,
                                nsim=1,
                                drop=TRUE)
```

```{r}
any(duplicated(supermarkets_ppp_jit))
```

```{r}
merged_owin <- read_rds("../data/rds/merged_owin.rds")
```

```{r}
supermarketsSG_ppp = supermarkets_ppp[merged_owin]
```

```{r}
plot(supermarketsSG_ppp)
```

```{r}
supermarketsSG_ppp.km <- rescale(supermarketsSG_ppp, 1000, "km")
par(mfrow=c(2,2), mar=c(3,3,1,3))
plot(density(supermarketsSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(supermarketsSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(supermarketsSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(supermarketsSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

```{r}
par(mfrow=c(1,2))
plot(density(supermarketsSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="gaussian"),
     main="Fixed bandwidth")
plot(adaptive.density(supermarketsSG_ppp.km,
                      method="kernel"),
     main="Adaptive bandwidth")
```

```{r}
kde_supermarketsSG.bw <- density(supermarketsSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="gaussian")
```

```{r}
gridded_kde_supermarketsSG_bw <- as.SpatialGridDataFrame.im(kde_supermarketsSG.bw)
spplot(gridded_kde_supermarketsSG_bw)
```

```{r}
kde_supermarketsSG_bw_raster <- raster(gridded_kde_supermarketsSG_bw)
kde_supermarketsSG_bw_raster
```

```{r}
projection(kde_supermarketsSG_bw_raster) <- CRS("+init=EPSG:3414 +units=km")
kde_supermarketsSG_bw_raster
```

```{r}
tmap_mode("view")
tm_basemap(server="OpenStreetMap.HOT") +
  tm_basemap(server = "Esri.WorldImagery") +
  tm_shape(kde_supermarketsSG_bw_raster) +
  tm_raster("v",
            title = "Kernel Density",
            style = "pretty",
            alpha = 0.6,
            palette = c("#fafac3","#fd953b","#f02a75","#b62385","#021c9e")) +
  tm_shape(merged)+
  tm_polygons(alpha=0.1,
              id="PLN_AREA_N", 
              popup.vars=c(
                "SUBZONE_N",
                "Total",
                "0 - 4",
                "5 - 9",
                "10 - 14",
                "15 - 19",
                "20 - 24",
                "25 - 29",
                "30 - 34",
                "35 - 39",
                "40 - 44",
                "45 - 49",
                "50 - 54",
                "55 - 59",
                "60 - 64",
                "65 - 69",
                "70 - 74",
                "75 - 79",
                "80 - 84",
                "85 - 89",
                "90 & Over"
              ))+
  tmap_options(check.and.fix = TRUE)
```

2OSPPA using Aljunied

```{r}
mpsz <- as_Spatial(mpsz)
mpsz
```

```{r}
aj = mpsz[mpsz@data$SUBZONE_N == "ALJUNIED",]
aj_sp = as(ls, "SpatialPolygons")
aj_owin = as(ls_sp, "owin")
aj_ppp = supermarkets_ppp_jit[aj_owin]
G_aj = Gest(aj_ppp, correction = "border")
plot(G_aj, xlim=c(0,500))
```

```{r}
F_aj = Fest(aj_ppp)
plot(F_aj)
```

```{r}
K_aj = Kest(aj_ppp, correction = "Ripley")
plot(K_aj, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

```{r}
L_aj = Lest(aj_ppp, correction="Ripley")
plot(L_aj, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```
